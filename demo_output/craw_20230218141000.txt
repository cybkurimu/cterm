testing
for
dom
xss
portswigger
login
products
solutions
research
academy
daily
swig
support
company
customers
about
blog
careers
legal
contact
resellers
my
account
customers
about
blog
careers
legal
contact
resellers
burp
suite
enterprise
edition
the
dynamic
web
vulnerability
burp
suite
professional
the
web
penetration
testing
burp
suite
community
edition
the
best
manual
tools
to
start
web
security
from
burp
suite
lightweight
web
application
security
scanning
for
view
all
product
editions
account
and
subscription
management
information
on
and
application
security
testing
see
how
our
software
enables
the
world
to
secure
the
devsecops
catch
critical
ship
more
secure
more
penetration
testing
accelerate
penetration
testing
find
more
more
automated
scanning
scale
dynamic
reduce
save
bug
bounty
hunting
level
up
your
hacking
and
earn
more
bug
compliance
enhance
security
monitoring
to
comply
with
view
all
solutions
product
comparison
the
difference
between
pro
and
enterprise
support
center
get
help
and
advice
from
our
experts
on
all
things
documentation
tutorials
and
guides
for
burp
get
started
professional
get
started
with
burp
suite
get
started
enterprise
get
started
with
burp
suite
enterprise
user
forum
get
your
questions
answered
in
the
user
downloads
download
the
latest
version
of
burp
visit
the
support
center
downloads
download
the
latest
version
of
burp
product
support
and
documentation
support
center
getting
started
edition
enterprise
edition
latest
releases
burp
extensions
installing
extensions
bapp
store
creating
extensions
user
forum
training
search
professional
and
community
edition
professional
and
community
edition
getting
started
step
download
and
install
step
intercepting
http
traffic
step
modifying
requests
step
setting
the
target
scope
step
reissuing
requests
step
running
your
first
scan
step
generating
a
report
step
what
testing
workflow
tools
browser
proxy
overview
getting
started
with
burp
proxy
proxy
intercept
http
history
overview
filtering
http
history
websockets
history
overview
filtering
websockets
history
settings
managing
ca
certificates
invisible
proxying
repeater
overview
getting
started
working
with
http
messages
overview
sending
requests
in
sequence
working
with
websocket
messages
tabs
managing
tabs
managing
tab
groups
settings
overview
settings
intruder
overview
getting
started
configuring
attacks
overview
payload
positions
attack
types
payload
types
overview
payload
lists
payload
processing
resource
pools
attack
settings
managing
tabs
attack
results
overview
editing
attacks
saving
attacks
viewing
results
analyzing
results
testing
workflow
typical
uses
overview
enumerating
identifiers
fuzzing
harvesting
data
enumerating
subdomains
logins
target
overview
site
map
overview
getting
started
workflow
tools
filter
comparing
site
maps
comparison
results
editing
the
layout
scope
overview
setting
the
target
scope
url
matching
issue
definitions
manual
application
mapping
reviewing
unrequested
items
analyzing
the
attack
surface
inspector
overview
getting
started
modifying
requests
settings
message
editor
overview
text
editor
settings
scanner
collaborator
overview
getting
started
settings
logger
overview
getting
started
working
with
logger
entries
settings
task
logger
viewing
requests
sent
by
burp
extensions
sequencer
overview
getting
started
obtaining
a
token
sample
overview
live
capture
settings
results
overview
tests
dom
invader
overview
enabling
dom
invader
testing
for
dom
xss
testing
with
web
messages
testing
for
prototype
pollution
testing
for
dom
clobbering
settings
overview
main
settings
attack
types
web
message
settings
prototype
pollution
settings
misc
settings
canary
settings
clickbandit
comparer
decoder
engagement
tools
overview
target
analyzer
content
discovery
generate
csrf
poc
manual
testing
simulator
infiltrator
search
tutorials
intercepting
http
requests
and
responses
augmenting
manual
testing
using
burp
scanner
resending
individual
requests
with
burp
repeater
scanning
a
website
for
vulnerabilities
using
live
tasks
in
burp
suite
using
burp
suite
projects
touring
the
burp
suite
user
interface
using
burp
interception
rules
using
target
scope
in
burp
suite
testing
websockets
with
burp
suite
reducing
noise
during
manual
testing
brute
forcing
a
login
with
burp
intruder
enumerating
subdomains
with
burp
intruder
viewing
requests
sent
by
burp
extensions
using
logger
testing
for
reflected
xss
using
burp
repeater
spoofing
your
ip
address
using
burp
proxy
match
and
replace
credential
stuffing
using
burp
intruder
burp
extensions
overview
installing
extensions
managing
extensions
monitoring
system
impact
creating
extensions
getting
started
for
the
bapp
store
acceptance
criteria
submitting
an
extension
montoya
api
javadoc
github
examples
extender
api
javadoc
examples
reporting
scan
results
overview
generating
a
report
report
settings
project
files
overview
creating
project
files
managing
project
files
settings
settings
overview
key
settings
tool
settings
proxy
intruder
repeater
sequencer
browser
project
settings
scope
collaborator
tasks
automatic
backup
logging
session
settings
sessions
session
handling
rule
editor
macro
editor
network
settings
connections
tls
http
user
interface
settings
inspector
and
message
editor
hotkeys
display
suite
settings
rest
api
updates
performance
feedback
temporary
files
location
extensions
configuration
library
response
extraction
rules
testing
mobile
applications
overview
configuring
an
ios
device
configuring
an
android
device
troubleshooting
testing
with
overview
basics
in
the
message
editor
performing
exclusive
attacks
training
troubleshooting
support
center
documentation
desktop
editions
tools
dom
invader
testing
for
dom
xss
professional
community
testing
for
dom
xss
last
february
read
minutes
testing
for
dom
xss
can
be
tedious
as
it
often
involves
manually
tracking
the
flow
of
your
input
through
complex
which
may
stretch
to
thousands
of
lines
of
dom
invader
greatly
simplifies
this
process
by
instantly
showing
you
any
sinks
that
your
input
flows
along
with
the
surrounding
you
can
access
most
of
the
related
features
from
the
dom
injecting
a
canary
dom
invader
works
by
automatically
parsing
the
dom
to
look
for
occurrences
of
a
predefined
this
is
an
arbitrary
but
distinct
string
of
alphanumeric
characters
that
you
can
inject
into
different
sources
to
see
which
sinks
they
flow
you
can
see
the
current
canary
that
dom
invader
is
tracking
in
the
corner
of
the
dom
note
that
you
can
change
the
canary
to
a
custom
string
if
you
to
manually
inject
the
canary
into
a
go
to
the
dom
invader
tab
in
the
devtools
make
sure
that
you
are
in
the
dom
click
copy
canary
the
canary
that
dom
invader
is
tracking
is
copied
to
your
paste
the
canary
into
any
inputs
that
you
want
to
this
could
be
query
parameters
in
the
form
and
so
for
more
information
about
potential
check
out
our
topic
on
vulnerabilities
on
the
web
security
web
security
academy
vulnerabilities
injecting
a
canary
into
multiple
sources
although
you
can
manually
paste
the
canary
into
multiple
sources
at
you
also
have
the
following
options
for
doing
this
inject
url
params
automatically
injects
the
canary
into
every
query
parameter
in
the
using
a
separate
tab
for
each
inject
forms
automatically
injects
the
canary
into
any
html
form
fields
detected
on
the
note
that
you
still
need
to
submit
the
form
manually
for
the
injection
to
take
note
injecting
the
canary
into
all
url
parameters
and
form
fields
at
once
may
prevent
the
site
from
working
for
the
best
we
recommend
testing
one
source
at
a
identifying
controllable
sinks
after
you
inject
a
dom
invader
automatically
parses
the
dom
to
identify
any
sinks
in
which
your
canary
it
then
displays
these
sinks
in
the
dom
sorted
in
order
of
how
interesting
they
determining
the
xss
context
once
you
have
identified
a
controllable
the
next
step
is
to
study
the
context
in
which
your
injected
payload
this
includes
determining
the
following
whether
working
with
an
html
or
javascript
execution
whether
your
input
is
surrounded
by
any
special
characters
that
you
need
to
break
out
these
include
and
so
what
kind
of
or
other
processing
the
website
performs
on
your
input
before
it
reaches
the
to
help
you
with
dom
invader
displays
the
including
both
your
canary
and
any
surrounding
characters
that
you
inject
as
they
appear
in
the
this
means
you
can
append
special
characters
to
your
canary
in
order
to
easily
see
whether
they
are
being
escaped
or
in
the
following
you
can
see
that
able
to
successfully
inject
a
variety
of
useful
you
can
also
see
the
following
details
depending
on
the
type
of
sink
dom
invader
has
outer
html
the
html
element
that
surrounds
your
frame
path
the
frame
in
which
your
canary
is
passed
to
the
event
the
javascript
event
that
occurs
when
your
canary
is
passed
to
the
this
information
enables
you
to
easily
see
the
xss
context
and
test
which
characters
and
events
you
need
to
craft
an
in
the
following
successfully
broken
out
of
the
string
and
surrounding
in
order
to
inject
our
xss
studying
the
code
when
experimenting
with
different
you
might
find
that
your
input
suddenly
stops
flowing
into
the
this
could
be
because
you
can
only
reach
the
sink
via
a
specific
code
such
as
one
branch
of
a
conditional
dom
invader
enables
you
to
jump
straight
to
the
point
in
the
code
where
your
input
is
passed
to
the
you
can
then
study
the
preceding
code
to
identify
what
conditions
your
input
must
meet
in
order
to
reach
the
to
view
the
relevant
line
in
the
inject
a
payload
that
you
know
will
reach
the
in
dom
dom
click
the
link
in
the
stack
trace
this
outputs
a
stack
trace
to
the
in
the
devtools
switch
to
the
console
in
the
stack
click
the
uppermost
link
may
only
be
this
opens
the
javascript
in
the
sources
tab
and
focuses
on
the
line
where
your
input
is
passed
to
the
read
more
dom
invader
is
highly
for
more
information
about
dom
advanced
features
and
how
you
can
their
behavior
for
a
particular
see
dom
invader
settings
was
this
article
not
really
an
error
please
try
burp
suite
web
vulnerability
scanner
burp
suite
editions
release
notes
vulnerabilities
scripting
sql
injection
request
forgery
xml
external
entity
injection
directory
traversal
request
forgery
customers
organizations
testers
developers
company
about
portswigger
news
careers
contact
legal
privacy
notice
insights
web
security
academy
blog
research
the
daily
swig
follow
us
portswigger
