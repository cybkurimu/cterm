burp
intruder
payload
types
portswigger
login
products
solutions
research
academy
daily
swig
support
company
customers
about
blog
careers
legal
contact
resellers
my
account
customers
about
blog
careers
legal
contact
resellers
burp
suite
enterprise
edition
the
dynamic
web
vulnerability
burp
suite
professional
the
web
penetration
testing
burp
suite
community
edition
the
best
manual
tools
to
start
web
security
from
burp
suite
lightweight
web
application
security
scanning
for
view
all
product
editions
account
and
subscription
management
information
on
and
application
security
testing
see
how
our
software
enables
the
world
to
secure
the
devsecops
catch
critical
ship
more
secure
more
penetration
testing
accelerate
penetration
testing
find
more
more
automated
scanning
scale
dynamic
reduce
save
bug
bounty
hunting
level
up
your
hacking
and
earn
more
bug
compliance
enhance
security
monitoring
to
comply
with
view
all
solutions
product
comparison
the
difference
between
pro
and
enterprise
support
center
get
help
and
advice
from
our
experts
on
all
things
documentation
tutorials
and
guides
for
burp
get
started
professional
get
started
with
burp
suite
get
started
enterprise
get
started
with
burp
suite
enterprise
user
forum
get
your
questions
answered
in
the
user
downloads
download
the
latest
version
of
burp
visit
the
support
center
downloads
download
the
latest
version
of
burp
product
support
and
documentation
support
center
getting
started
edition
enterprise
edition
latest
releases
burp
extensions
installing
extensions
bapp
store
creating
extensions
user
forum
training
search
professional
and
community
edition
professional
and
community
edition
getting
started
step
download
and
install
step
intercepting
http
traffic
step
modifying
requests
step
setting
the
target
scope
step
reissuing
requests
step
running
your
first
scan
step
generating
a
report
step
what
testing
workflow
tools
browser
proxy
overview
getting
started
with
burp
proxy
proxy
intercept
http
history
overview
filtering
http
history
websockets
history
overview
filtering
websockets
history
settings
managing
ca
certificates
invisible
proxying
repeater
overview
getting
started
working
with
http
messages
overview
sending
requests
in
sequence
working
with
websocket
messages
tabs
managing
tabs
managing
tab
groups
settings
overview
settings
intruder
overview
getting
started
configuring
attacks
overview
payload
positions
attack
types
payload
types
overview
payload
lists
payload
processing
resource
pools
attack
settings
managing
tabs
attack
results
overview
editing
attacks
saving
attacks
viewing
results
analyzing
results
testing
workflow
typical
uses
overview
enumerating
identifiers
fuzzing
harvesting
data
enumerating
subdomains
logins
target
overview
site
map
overview
getting
started
workflow
tools
filter
comparing
site
maps
comparison
results
editing
the
layout
scope
overview
setting
the
target
scope
url
matching
issue
definitions
manual
application
mapping
reviewing
unrequested
items
analyzing
the
attack
surface
inspector
overview
getting
started
modifying
requests
settings
message
editor
overview
text
editor
settings
scanner
collaborator
overview
getting
started
settings
logger
overview
getting
started
working
with
logger
entries
settings
task
logger
viewing
requests
sent
by
burp
extensions
sequencer
overview
getting
started
obtaining
a
token
sample
overview
live
capture
settings
results
overview
tests
dom
invader
overview
enabling
dom
invader
testing
for
dom
xss
testing
with
web
messages
testing
for
prototype
pollution
testing
for
dom
clobbering
settings
overview
main
settings
attack
types
web
message
settings
prototype
pollution
settings
misc
settings
canary
settings
clickbandit
comparer
decoder
engagement
tools
overview
target
analyzer
content
discovery
generate
csrf
poc
manual
testing
simulator
infiltrator
search
tutorials
intercepting
http
requests
and
responses
augmenting
manual
testing
using
burp
scanner
resending
individual
requests
with
burp
repeater
scanning
a
website
for
vulnerabilities
using
live
tasks
in
burp
suite
using
burp
suite
projects
touring
the
burp
suite
user
interface
using
burp
interception
rules
using
target
scope
in
burp
suite
testing
websockets
with
burp
suite
reducing
noise
during
manual
testing
brute
forcing
a
login
with
burp
intruder
enumerating
subdomains
with
burp
intruder
viewing
requests
sent
by
burp
extensions
using
logger
testing
for
reflected
xss
using
burp
repeater
spoofing
your
ip
address
using
burp
proxy
match
and
replace
credential
stuffing
using
burp
intruder
burp
extensions
overview
installing
extensions
managing
extensions
monitoring
system
impact
creating
extensions
getting
started
for
the
bapp
store
acceptance
criteria
submitting
an
extension
montoya
api
javadoc
github
examples
extender
api
javadoc
examples
reporting
scan
results
overview
generating
a
report
report
settings
project
files
overview
creating
project
files
managing
project
files
settings
settings
overview
key
settings
tool
settings
proxy
intruder
repeater
sequencer
browser
project
settings
scope
collaborator
tasks
automatic
backup
logging
session
settings
sessions
session
handling
rule
editor
macro
editor
network
settings
connections
tls
http
user
interface
settings
inspector
and
message
editor
hotkeys
display
suite
settings
rest
api
updates
performance
feedback
temporary
files
location
extensions
configuration
library
response
extraction
rules
testing
mobile
applications
overview
configuring
an
ios
device
configuring
an
android
device
troubleshooting
testing
with
overview
basics
in
the
message
editor
performing
exclusive
attacks
training
troubleshooting
support
center
documentation
desktop
editions
tools
intruder
configure
attack
payload
types
professional
burp
intruder
payload
types
last
february
read
minutes
you
can
set
the
type
of
payload
that
you
want
to
inject
into
the
base
burp
intruder
provides
a
range
of
options
for
different
types
of
or
you
can
use
a
simple
you
can
select
a
payload
type
under
the
payload
sets
in
the
intruder
payloads
related
pages
professional
you
can
use
predefined
payload
lists
with
many
of
the
payload
for
more
see
predefined
payload
lists
payload
settings
you
can
customize
each
payload
type
in
the
payload
settings
many
types
offer
the
following
base
configuration
paste
insert
a
list
from
your
load
load
a
list
from
a
remove
delete
the
highlighted
clear
delete
all
items
in
the
deduplicate
remove
duplicate
entries
from
your
this
increases
the
efficiency
of
your
attacks
by
reducing
the
number
of
requests
that
are
add
enter
a
new
add
from
list
add
a
predefined
payload
simple
list
this
enables
you
to
configure
a
simple
list
of
strings
that
are
used
as
runtime
file
this
enables
you
to
configure
a
file
from
which
to
read
payload
strings
at
you
can
use
this
payload
type
when
a
very
large
list
of
payloads
is
to
avoid
holding
the
entire
list
in
one
payload
is
read
from
each
line
of
the
hence
payloads
may
not
contain
newline
custom
iterator
this
enables
you
to
generate
payloads
using
permutations
of
characters
or
other
items
according
to
a
given
you
can
define
up
to
eight
different
positions
in
the
and
set
each
position
with
a
list
of
you
can
use
a
separator
between
any
for
you
could
set
up
an
attack
to
iterate
through
all
possible
permutations
of
the
template
with
the
first
two
positions
cycling
through
a
and
the
second
two
positions
cycling
through
this
could
be
useful
for
a
payroll
application
identifies
individuals
using
a
number
of
the
form
there
are
various
ways
to
edit
the
list
to
remove
configuration
from
all
positions
of
the
custom
click
clear
all
to
select
a
preconfigured
setup
for
the
custom
click
on
the
preset
schemes
menu
and
select
a
the
scheme
can
then
be
you
can
choose
directories
file
extensions
generate
hex
generate
hexadecimal
passwords
digit
generate
an
extended
wordlist
for
password
guessing
character
substitution
this
enables
you
to
apply
character
substitutions
to
each
item
in
a
list
of
you
can
use
character
substitution
in
password
guessing
for
generating
common
variations
on
dictionary
the
subsequent
attack
uses
all
permutations
of
substituted
characters
for
each
list
item
in
for
for
the
substitutions
e
and
t
the
item
will
generate
the
following
peter
case
modification
this
enables
you
to
apply
case
modifications
to
each
item
in
a
list
of
you
can
use
case
modification
in
password
guessing
for
generating
case
variations
on
dictionary
the
subsequent
attack
adjusts
the
case
of
characters
within
each
item
in
duplicate
payloads
are
you
can
select
from
a
range
of
case
modification
no
change
no
to
lower
case
all
letters
are
converted
to
lower
to
upper
case
all
letters
are
converted
to
upper
to
propername
the
first
letter
is
converted
to
upper
and
subsequent
letters
are
converted
to
lower
to
propername
the
first
letter
is
converted
to
upper
and
subsequent
letters
are
not
for
if
all
modification
options
are
the
item
will
generate
the
following
peter
wiener
peter
wiener
peter
wiener
peter
wiener
recursive
grep
this
enables
you
to
extract
text
from
the
response
to
the
previous
and
use
it
as
the
payload
for
the
current
you
can
use
this
payload
type
when
you
need
to
work
recursively
to
extract
useful
data
or
deliver
an
for
to
extract
the
contents
of
a
database
via
sql
injection
by
recursively
injecting
queries
of
the
union
select
name
from
sysobjects
where
name
the
error
message
discloses
the
name
of
the
first
database
syntax
error
converting
the
varchar
value
to
a
column
of
data
type
the
query
is
then
repeated
using
to
identify
the
next
this
task
can
be
easily
automated
using
recursive
grep
payloads
to
quickly
list
all
objects
within
the
the
following
settings
must
be
initial
payload
for
first
request
enter
an
initial
this
is
used
to
generate
the
first
request
and
extract
grep
item
select
an
extract
grep
this
is
used
to
extract
an
interesting
part
of
the
previous
which
is
then
used
to
derive
further
for
instructions
on
how
to
define
an
extract
grep
see
burp
intruder
attack
settings
stop
if
duplicate
payload
found
stop
the
attack
when
the
same
payload
is
derived
twice
in
this
normally
indicates
that
the
exercise
is
note
attacks
using
the
recursive
grep
payload
type
must
use
a
resource
pool
with
a
max
concurrent
request
of
for
more
information
on
resource
see
intruder
resource
pools
illegal
unicode
this
enables
you
to
generate
payloads
from
a
list
of
items
by
replacing
a
specified
character
with
illegal
of
another
you
can
use
this
payload
type
to
attempt
to
bypass
filters
designed
to
block
certain
for
defenses
against
file
path
traversal
attacks
which
match
on
expected
encodings
of
the
and
the
available
settings
are
described
overlong
encodings
you
can
specify
whether
overlong
encoding
is
and
set
a
maximum
length
of
up
to
this
allows
you
to
represent
basic
ascii
characters
in
the
unicode
they
are
usually
correctly
represented
using
a
single
illegal
continuation
bytes
do
illegal
generate
three
additional
encodings
for
each
continuation
byte
in
when
the
maximum
overlong
length
is
set
to
two
bytes
or
three
illegal
variants
of
each
continuation
byte
are
with
the
binary
forms
and
this
is
when
a
character
is
encoded
with
more
than
one
the
bytes
following
the
first
take
the
binary
form
to
designate
that
they
are
continuation
the
most
significant
bits
of
the
first
byte
also
identify
how
many
continuation
bytes
will
so
unicode
decoding
routines
may
ignore
the
first
two
bits
of
continuation
maximize
permutations
in
encodings
modify
more
than
one
continuation
byte
when
you
have
selected
do
illegal
and
a
maximum
overlong
utf
length
of
three
bytes
or
this
generates
all
permutations
of
illegal
variants
for
continuation
you
can
use
this
to
attempt
to
circumvent
advanced
by
generating
a
much
larger
number
of
different
illegal
illegal
hex
characters
these
settings
control
how
the
generated
byte
sequences
are
represented
using
hexadecimal
do
illegal
hex
when
the
list
of
items
has
been
generated
using
overlong
encodings
and
illegal
variants
of
continuation
bytes
it
is
possible
to
modify
the
hexadecimal
encoding
of
the
resulting
byte
sequences
to
confuse
certain
hex
encoding
uses
the
characters
a
f
to
represent
the
decimal
values
some
hex
decoders
for
g
as
decimal
and
h
as
decimal
so
may
be
interpreted
as
decimal
if
illegal
hex
characters
are
used
in
the
first
position
of
a
two
digit
hex
then
the
resulting
decoding
overflows
the
maximum
value
of
a
single
and
in
this
situation
some
hex
decoders
only
use
the
least
significant
bits
of
the
resulting
so
may
be
decoded
as
decimal
which
is
then
interpreted
as
decimal
each
legal
hex
code
has
between
and
corresponding
illegal
hex
representations
which
are
interpreted
as
that
same
hex
code
if
decoded
as
described
if
the
do
illegal
hex
setting
is
then
burp
will
generate
all
possible
illegal
hex
encodings
of
each
byte
in
the
list
of
maximize
permutations
in
encodings
modify
more
than
one
byte
when
you
have
selected
do
illegal
hex
and
a
maximum
overlong
length
of
two
bytes
or
this
generates
all
permutations
of
illegal
hex
for
all
you
can
use
this
to
attempt
to
circumvent
advanced
by
generating
a
much
larger
number
of
different
illegal
hex
formatting
these
settings
control
the
appearance
of
use
lower
case
alpha
characters
specify
whether
lower
or
upper
case
alphabet
characters
are
used
in
hex
add
prefix
before
each
byte
insert
the
character
before
each
hex
to
effectively
the
generated
total
encodings
this
setting
enables
you
view
a
best
estimate
for
the
number
of
based
on
the
rest
of
the
specify
a
ceiling
on
the
number
of
illegal
encodings
that
will
be
this
can
be
useful
if
large
overlong
encodings
are
being
used
or
maximum
permutations
have
been
as
these
settings
may
generate
huge
numbers
of
illegal
match
replace
in
list
items
these
settings
control
the
replacement
of
characters
within
list
match
character
specify
the
character
that
will
be
replaced
within
each
list
use
a
dummy
character
such
as
in
your
list
to
indicate
where
replacements
should
replace
with
encodings
of
specify
the
character
for
which
illegal
encodings
will
be
to
replace
the
original
match
character
within
each
list
this
setting
can
be
specified
using
the
ascii
character
or
the
hex
code
for
the
this
is
useful
for
specifying
ascii
such
as
character
blocks
this
enables
you
to
generate
payloads
based
on
blocks
of
a
specified
character
or
you
can
use
this
payload
type
detect
buffer
overflow
and
other
boundary
condition
vulnerabilities
in
software
running
in
a
native
exploit
some
logic
flaws
where
input
of
a
particular
length
bypasses
input
filters
or
triggers
an
unexpected
code
the
following
settings
are
base
string
the
input
from
which
the
character
blocks
will
be
min
length
the
base
string
is
multiplied
by
this
number
to
generate
the
smallest
max
length
the
base
string
is
multiplied
by
this
number
to
generate
the
largest
step
the
increment
in
the
length
of
each
character
numbers
this
enables
you
to
generate
numeric
payloads
within
a
given
range
and
in
a
specified
number
range
you
can
configure
various
aspects
of
the
number
type
specify
whether
numbers
are
generated
or
at
from
specify
the
first
number
that
is
generated
the
smallest
number
that
may
be
randomly
to
specify
the
last
number
that
is
generated
or
nearest
lower
increment
of
the
step
the
largest
number
that
may
be
randomly
step
specify
the
increment
between
sequentially
generated
successive
the
value
may
be
in
which
case
the
numbers
generated
will
step
how
many
the
number
of
payloads
that
will
be
randomly
note
that
duplicate
payloads
may
be
note
if
you
need
to
cycle
through
a
range
of
numbers
containing
many
total
digits
than
approximately
then
it
is
more
reliable
to
use
your
payload
markers
to
highlight
a
of
the
larger
number
within
the
attack
and
generate
numeric
payloads
containing
correspondingly
fewer
this
is
because
burp
uses
floating
point
numbers
for
both
the
number
range
configuration
and
the
internal
state
of
the
payload
generator
at
some
loss
of
precision
is
to
be
expected
when
dealing
with
very
large
numbers
or
very
precise
fractional
number
format
you
can
also
configure
various
aspects
of
the
number
base
specify
whether
numbers
are
generated
in
decimal
or
hexadecimal
min
integer
digits
set
the
minimum
number
of
integer
digits
each
number
will
numbers
with
fewer
integer
digits
are
padded
with
zeros
on
the
left
hand
max
integer
digits
set
the
maximum
number
of
integer
digits
each
number
will
numbers
with
more
integer
digits
are
losing
their
most
significant
integer
min
fraction
digits
set
the
minimum
number
of
fraction
digits
the
decimal
each
number
will
numbers
with
fewer
fraction
digits
are
padded
with
zeros
on
the
right
hand
only
available
when
generating
decimal
max
fraction
digits
set
the
maximum
number
of
fraction
digits
the
decimal
each
number
will
numbers
with
more
fraction
digits
are
losing
their
least
significant
fraction
only
available
when
generating
decimal
to
indicate
that
no
minimum
or
maximum
size
should
be
leave
any
of
the
digit
settings
as
you
edit
the
number
example
numbers
with
the
minimum
and
maximum
number
of
digits
are
dates
this
enables
you
to
generate
date
payloads
within
a
given
range
and
in
a
specified
you
can
use
this
payload
type
data
for
trawling
an
order
book
for
entries
placed
on
different
brute
for
guessing
the
date
of
birth
component
of
a
the
following
settings
are
from
set
the
first
date
that
will
be
to
set
the
value
of
the
last
date
that
will
be
generated
the
nearest
lower
increment
of
the
step
step
set
the
increment
between
successive
in
months
or
it
must
be
a
positive
format
set
the
format
in
which
the
dates
should
be
several
predefined
date
formats
can
be
or
a
custom
format
can
be
the
examples
below
illustrate
the
syntax
that
can
be
used
to
specify
custom
date
e
sat
eeee
saturday
d
dd
m
mm
mmm
jun
mmmm
june
yy
yyyy
brute
forcer
this
enables
you
to
generate
payloads
of
specified
lengths
that
contain
all
permutations
of
a
specified
character
the
following
settings
are
character
set
specify
the
set
of
characters
to
be
used
in
the
note
that
the
total
number
of
payloads
increases
exponentially
with
the
size
of
this
min
length
set
the
length
of
the
shortest
max
length
set
the
length
of
the
longest
null
payloads
this
enables
you
to
generate
payloads
whose
value
is
an
empty
you
can
use
this
to
repeatedly
issue
the
base
request
unmodified
you
need
to
configure
payload
you
can
use
this
payload
type
for
a
variety
of
for
harvesting
cookies
for
sequencing
attacks
where
requests
are
repeatedly
sent
which
initiate
tasks
on
the
keeping
alive
a
session
token
that
is
being
used
in
other
intermittent
you
can
generate
a
specified
number
of
null
or
continue
character
frobber
this
enables
you
to
modify
the
value
of
each
character
position
of
an
the
input
could
be
the
base
value
of
each
payload
or
a
specified
the
attack
cycles
through
each
item
in
one
character
at
a
incrementing
the
ascii
code
of
that
character
by
you
can
use
this
payload
type
to
test
which
parameter
or
parts
of
have
an
effect
on
the
for
you
can
use
it
to
test
which
parts
of
a
session
token
track
session
if
you
modify
the
value
of
an
individual
character
within
the
and
your
request
is
still
processed
within
your
then
it
is
likely
that
this
character
is
not
used
to
track
your
bit
flipper
this
enables
you
to
modify
the
value
of
each
bit
position
of
an
the
input
could
be
the
base
value
of
each
payload
or
a
specified
it
cycles
through
each
one
character
at
a
flipping
each
specified
bit
in
the
following
settings
are
operate
on
specify
whether
to
operate
on
the
base
value
of
the
payload
or
on
another
format
of
original
data
whether
the
generator
should
operate
on
the
literal
value
of
the
original
or
treat
it
as
ascii
hex
further
select
bits
to
flip
specify
which
bits
in
each
byte
should
be
through
from
the
least
significant
bit
through
to
the
most
significant
bit
for
if
the
base
value
is
then
operating
on
the
literal
string
and
flipping
all
bits
will
result
in
the
following
cb
eb
ib
qb
ab
áb
ac
af
aj
ar
ab
aâ
whereas
treating
as
an
ascii
hex
string
and
flipping
all
bits
will
result
in
the
following
aa
af
bb
eb
you
can
use
the
bit
flipper
in
similar
situations
to
the
character
frobber
but
where
you
need
for
if
session
tokens
or
other
parameter
values
contain
meaningful
data
encrypted
with
a
block
cipher
in
cbc
it
may
be
possible
to
change
parts
of
the
decrypted
data
systematically
by
modifying
bits
within
the
preceding
cipher
you
can
use
this
payload
type
to
determine
the
effects
of
modifying
individual
bits
within
the
encrypted
username
generator
this
enables
you
to
derive
potential
usernames
from
a
list
of
names
or
email
using
various
common
this
payload
type
is
useful
if
you
are
targeting
a
particular
human
and
you
do
not
know
the
username
or
email
address
scheme
in
use
within
an
for
supplying
the
name
results
in
up
to
possible
peterweiner
wienerpeter
peter
wiener
peterw
wpeter
pwiener
wienerp
you
can
configure
a
maximum
number
of
payloads
to
generate
per
item
in
the
ecb
block
shuffler
this
enables
you
to
shuffle
blocks
of
ciphertext
in
to
modify
the
decrypted
cleartext
and
potentially
interfere
with
application
because
ecb
ciphers
encrypt
each
block
of
plaintext
independently
of
identical
blocks
of
plaintext
encrypt
into
identical
blocks
of
ciphertext
the
same
key
is
and
vice
it
is
possible
to
shuffle
blocks
within
a
large
piece
of
ciphertext
with
the
effect
of
shuffling
the
corresponding
blocks
of
decrypted
in
some
data
as
a
structured
session
token
with
fields
for
user
and
a
it
may
be
possible
to
meaningfully
alter
the
content
of
the
decrypted
data
so
as
to
interfere
with
application
and
carry
out
unauthorized
the
following
settings
are
encrypted
data
to
shuffle
select
whether
to
operate
on
the
base
value
of
the
payload
or
on
another
format
of
original
data
select
whether
the
generator
should
operate
on
the
literal
value
of
the
original
or
should
treat
it
as
ascii
hex
the
bit
flipper
payload
type
for
more
block
size
set
the
size
of
the
encrypted
blocks
in
in
most
the
blocks
are
or
bytes
in
if
you
are
run
the
attack
multiple
times
using
each
block
size
that
might
be
in
additional
encrypted
strings
supply
a
list
of
encrypted
strings
that
use
the
same
cipher
and
to
provide
additional
blocks
for
shuffling
into
the
encrypted
because
successful
attacks
of
this
type
often
require
a
considerable
degree
of
in
terms
of
finding
a
block
with
a
suitable
plaintext
value
that
can
be
shuffled
into
the
correct
point
in
the
the
odds
of
success
are
frequently
improved
by
obtaining
a
large
sample
of
strings
that
have
been
encrypted
by
the
same
application
for
if
you
are
attacking
a
session
token
using
this
payload
it
would
be
beneficial
to
harvest
a
large
number
of
other
session
tokens
from
the
to
provide
additional
blocks
of
this
enables
you
to
invoke
a
burp
extension
to
generate
click
select
generator
to
select
an
payload
generator
from
the
the
extension
must
be
registered
as
an
intruder
payload
copy
other
payload
this
enables
you
to
copy
the
value
of
the
current
payload
to
another
payload
this
payload
type
can
be
useful
in
various
for
when
two
different
parameters
must
always
have
the
same
value
in
order
to
hit
a
target
code
path
fields
for
new
and
confirm
and
you
want
to
use
the
cluster
bomb
attack
type
to
manipulate
other
parameters
at
the
same
when
one
parameter
value
in
the
request
contains
a
checksum
of
another
parameter
which
is
normally
computed
by
a
script
based
on
user
note
this
payload
type
enables
you
to
copy
the
literal
value
of
the
but
you
can
also
systematically
derive
the
current
payload
from
the
value
of
a
payload
at
another
to
do
define
an
appropriate
payload
processing
rule
was
this
article
not
really
an
error
please
try
burp
suite
web
vulnerability
scanner
burp
suite
editions
release
notes
vulnerabilities
scripting
sql
injection
request
forgery
xml
external
entity
injection
directory
traversal
request
forgery
customers
organizations
testers
developers
company
about
portswigger
news
careers
contact
legal
privacy
notice
insights
web
security
academy
blog
research
the
daily
swig
follow
us
portswigger
