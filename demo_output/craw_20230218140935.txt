burp
sequencer
randomness
tests
portswigger
login
products
solutions
research
academy
daily
swig
support
company
customers
about
blog
careers
legal
contact
resellers
my
account
customers
about
blog
careers
legal
contact
resellers
burp
suite
enterprise
edition
the
dynamic
web
vulnerability
burp
suite
professional
the
web
penetration
testing
burp
suite
community
edition
the
best
manual
tools
to
start
web
security
from
burp
suite
lightweight
web
application
security
scanning
for
view
all
product
editions
account
and
subscription
management
information
on
and
application
security
testing
see
how
our
software
enables
the
world
to
secure
the
devsecops
catch
critical
ship
more
secure
more
penetration
testing
accelerate
penetration
testing
find
more
more
automated
scanning
scale
dynamic
reduce
save
bug
bounty
hunting
level
up
your
hacking
and
earn
more
bug
compliance
enhance
security
monitoring
to
comply
with
view
all
solutions
product
comparison
the
difference
between
pro
and
enterprise
support
center
get
help
and
advice
from
our
experts
on
all
things
documentation
tutorials
and
guides
for
burp
get
started
professional
get
started
with
burp
suite
get
started
enterprise
get
started
with
burp
suite
enterprise
user
forum
get
your
questions
answered
in
the
user
downloads
download
the
latest
version
of
burp
visit
the
support
center
downloads
download
the
latest
version
of
burp
product
support
and
documentation
support
center
getting
started
edition
enterprise
edition
latest
releases
burp
extensions
installing
extensions
bapp
store
creating
extensions
user
forum
training
search
professional
and
community
edition
professional
and
community
edition
getting
started
step
download
and
install
step
intercepting
http
traffic
step
modifying
requests
step
setting
the
target
scope
step
reissuing
requests
step
running
your
first
scan
step
generating
a
report
step
what
testing
workflow
tools
browser
proxy
overview
getting
started
with
burp
proxy
proxy
intercept
http
history
overview
filtering
http
history
websockets
history
overview
filtering
websockets
history
settings
managing
ca
certificates
invisible
proxying
repeater
overview
getting
started
working
with
http
messages
overview
sending
requests
in
sequence
working
with
websocket
messages
tabs
managing
tabs
managing
tab
groups
settings
overview
settings
intruder
overview
getting
started
configuring
attacks
overview
payload
positions
attack
types
payload
types
overview
payload
lists
payload
processing
resource
pools
attack
settings
managing
tabs
attack
results
overview
editing
attacks
saving
attacks
viewing
results
analyzing
results
testing
workflow
typical
uses
overview
enumerating
identifiers
fuzzing
harvesting
data
enumerating
subdomains
logins
target
overview
site
map
overview
getting
started
workflow
tools
filter
comparing
site
maps
comparison
results
editing
the
layout
scope
overview
setting
the
target
scope
url
matching
issue
definitions
manual
application
mapping
reviewing
unrequested
items
analyzing
the
attack
surface
inspector
overview
getting
started
modifying
requests
settings
message
editor
overview
text
editor
settings
scanner
collaborator
overview
getting
started
settings
logger
overview
getting
started
working
with
logger
entries
settings
task
logger
viewing
requests
sent
by
burp
extensions
sequencer
overview
getting
started
obtaining
a
token
sample
overview
live
capture
settings
results
overview
tests
dom
invader
overview
enabling
dom
invader
testing
for
dom
xss
testing
with
web
messages
testing
for
prototype
pollution
testing
for
dom
clobbering
settings
overview
main
settings
attack
types
web
message
settings
prototype
pollution
settings
misc
settings
canary
settings
clickbandit
comparer
decoder
engagement
tools
overview
target
analyzer
content
discovery
generate
csrf
poc
manual
testing
simulator
infiltrator
search
tutorials
intercepting
http
requests
and
responses
augmenting
manual
testing
using
burp
scanner
resending
individual
requests
with
burp
repeater
scanning
a
website
for
vulnerabilities
using
live
tasks
in
burp
suite
using
burp
suite
projects
touring
the
burp
suite
user
interface
using
burp
interception
rules
using
target
scope
in
burp
suite
testing
websockets
with
burp
suite
reducing
noise
during
manual
testing
brute
forcing
a
login
with
burp
intruder
enumerating
subdomains
with
burp
intruder
viewing
requests
sent
by
burp
extensions
using
logger
testing
for
reflected
xss
using
burp
repeater
spoofing
your
ip
address
using
burp
proxy
match
and
replace
credential
stuffing
using
burp
intruder
burp
extensions
overview
installing
extensions
managing
extensions
monitoring
system
impact
creating
extensions
getting
started
for
the
bapp
store
acceptance
criteria
submitting
an
extension
montoya
api
javadoc
github
examples
extender
api
javadoc
examples
reporting
scan
results
overview
generating
a
report
report
settings
project
files
overview
creating
project
files
managing
project
files
settings
settings
overview
key
settings
tool
settings
proxy
intruder
repeater
sequencer
browser
project
settings
scope
collaborator
tasks
automatic
backup
logging
session
settings
sessions
session
handling
rule
editor
macro
editor
network
settings
connections
tls
http
user
interface
settings
inspector
and
message
editor
hotkeys
display
suite
settings
rest
api
updates
performance
feedback
temporary
files
location
extensions
configuration
library
response
extraction
rules
testing
mobile
applications
overview
configuring
an
ios
device
configuring
an
android
device
troubleshooting
testing
with
overview
basics
in
the
message
editor
performing
exclusive
attacks
training
troubleshooting
support
center
documentation
desktop
editions
tools
sequencer
results
tests
professional
community
burp
sequencer
randomness
tests
last
february
read
minutes
burp
sequencer
employs
a
variety
of
standard
statistical
tests
for
the
tests
performed
by
burp
sequencer
operate
on
two
levels
of
and
test
results
are
compiled
and
note
for
general
information
about
how
results
are
presented
in
see
burp
sequencer
results
how
the
tests
work
all
burp
sequencer
tests
start
with
the
hypothesis
that
the
tokens
are
randomly
each
test
observes
properties
of
the
sample
that
are
likely
to
have
certain
characteristics
if
the
tokens
are
randomly
for
burp
may
observe
the
distribution
of
characters
used
at
each
position
within
the
this
is
likely
to
be
approximately
uniform
if
the
tokens
are
calculates
the
probability
of
the
observed
characteristics
occurring
if
the
tokens
are
randomly
compares
the
probability
to
a
range
of
significance
you
can
reject
the
hypothesis
that
the
sample
is
randomly
generated
if
the
probability
falls
below
the
significance
level
you
choose
for
your
you
can
choose
the
probability
you
use
to
interpret
the
randomness
of
your
findings
this
is
the
significance
scientific
experiments
often
use
levels
between
and
fips
tests
often
use
levels
between
and
a
lower
significance
level
means
that
stronger
evidence
is
required
to
reject
the
hypothesis
that
the
tokens
are
randomly
this
increases
the
chance
that
data
will
be
treated
as
tests
the
tests
operate
on
each
character
position
of
the
token
in
its
raw
note
to
calculate
the
number
of
bits
of
effective
entropy
at
or
above
each
significance
each
character
position
is
assigned
a
number
of
bits
of
this
is
based
on
the
size
of
its
character
set
two
bits
for
four
three
bits
for
eight
two
different
tests
are
performed
at
each
character
character
count
analysis
this
test
analyzes
the
distribution
of
characters
used
at
each
position
within
the
if
the
sample
is
randomly
the
distribution
of
characters
is
likely
to
be
approximately
at
each
the
test
calculates
the
probability
of
the
observed
distribution
arising
if
the
tokens
are
character
transition
analysis
this
test
analyzes
the
transitions
between
successive
tokens
in
the
if
the
sample
is
randomly
a
character
appearing
at
a
given
position
is
equally
likely
to
be
followed
in
the
next
token
by
any
one
of
the
characters
that
is
used
at
that
at
each
the
test
calculates
the
probability
of
the
observed
transitions
arising
if
the
tokens
are
analysis
when
using
each
token
is
converted
into
a
set
of
this
enables
burp
to
perform
powerful
tests
at
each
bit
the
total
number
of
bits
is
determined
by
the
size
of
the
character
set
at
each
character
fips
test
results
burp
sequencer
carries
out
multiple
types
of
fips
tests
on
each
sequencer
records
whether
each
bit
passed
or
failed
the
fips
sequencer
adjusts
the
fips
pass
criteria
to
work
with
random
sample
to
obtain
results
that
are
compliant
with
the
formal
fips
you
must
use
a
sample
of
fips
monobit
test
this
test
analyzes
the
distribution
of
ones
and
zeroes
at
each
bit
if
the
sample
is
randomly
the
number
of
ones
and
zeroes
is
likely
to
be
approximately
at
each
the
test
calculates
the
probability
of
the
observed
distribution
arising
if
the
tokens
are
fips
poker
test
this
test
analyzes
the
distribution
of
divides
the
bit
sequence
at
each
position
into
groups
of
derives
a
number
from
each
counts
the
number
of
occurrences
of
each
of
the
possible
performs
a
calculation
to
evaluate
this
if
the
sample
is
randomly
the
distribution
of
numbers
is
likely
to
be
approximately
at
each
the
test
calculates
the
probability
of
the
observed
distribution
arising
if
the
tokens
are
fips
runs
test
this
test
divides
the
bit
sequence
at
each
position
into
runs
of
consecutive
bits
that
have
the
same
it
then
counts
the
number
of
runs
with
a
length
of
and
and
if
the
sample
is
randomly
the
number
of
runs
with
each
of
these
lengths
is
likely
to
be
within
a
range
determined
by
the
size
of
the
sample
at
each
the
test
calculates
the
probability
of
the
observed
runs
occurring
if
the
tokens
are
fips
long
runs
test
this
test
measures
the
longest
run
of
bits
with
the
same
value
at
each
bit
if
the
sample
is
randomly
the
longest
run
is
likely
to
be
within
a
range
determined
by
the
size
of
the
sample
at
each
the
test
calculates
the
probability
of
the
observed
longest
run
arising
if
the
tokens
are
note
the
fips
result
for
the
fips
long
runs
test
only
records
a
fail
if
the
longest
run
of
bits
is
overly
if
the
longest
run
of
bits
is
too
this
also
indicates
that
the
sample
is
not
therefore
some
bits
may
record
a
probability
that
is
below
the
fips
significance
level
even
though
they
do
not
fail
the
fips
spectral
tests
this
test
analyzes
the
bit
sequence
at
each
sequencer
treats
each
series
of
consecutive
numbers
as
coordinates
in
a
it
then
plots
a
point
in
this
space
at
each
location
determined
by
these
if
the
sample
is
randomly
the
distribution
of
points
within
this
space
is
likely
to
be
approximately
if
clusters
appear
within
the
space
then
the
data
is
likely
to
be
at
each
the
test
calculates
the
probability
of
the
observed
distribution
occurring
if
the
tokens
are
the
test
is
repeated
for
multiple
sizes
of
number
and
and
for
multiple
numbers
of
dimensions
and
this
test
can
identify
evidence
of
in
some
samples
that
pass
the
other
statistical
correlation
test
this
tests
for
any
statistically
significant
relationships
between
the
values
at
different
bit
positions
within
the
if
the
sample
is
randomly
a
value
at
a
given
bit
position
is
equally
likely
to
be
accompanied
by
a
one
or
a
zero
at
any
other
bit
at
each
this
test
calculates
the
probability
of
the
relationships
observed
with
bits
at
other
positions
arising
if
the
tokens
are
to
prevent
arbitrary
when
a
degree
of
correlation
is
observed
between
two
the
test
adjusts
the
significance
level
of
the
bit
whose
significance
level
is
lower
based
on
all
of
the
other
note
this
test
enables
you
to
assess
the
amount
of
randomness
in
the
token
as
a
this
is
important
as
each
of
the
tests
operates
only
on
individual
bit
the
randomness
at
each
bit
position
is
calculated
in
this
means
that
a
sample
of
tokens
with
the
same
bit
value
at
each
position
may
appear
to
contain
more
entropy
than
a
sample
of
shorter
tokens
with
different
values
at
each
compression
test
this
test
provides
a
simple
intuitive
indication
of
the
amount
of
entropy
at
each
bit
the
test
attempts
to
compress
the
bit
sequence
at
each
position
using
standard
zlib
the
results
indicate
the
proportional
reduction
in
the
size
of
the
bit
sequence
when
it
is
a
higher
degree
of
compression
indicates
that
the
data
is
less
likely
to
be
randomly
was
this
article
not
really
an
error
please
try
burp
suite
web
vulnerability
scanner
burp
suite
editions
release
notes
vulnerabilities
scripting
sql
injection
request
forgery
xml
external
entity
injection
directory
traversal
request
forgery
customers
organizations
testers
developers
company
about
portswigger
news
careers
contact
legal
privacy
notice
insights
web
security
academy
blog
research
the
daily
swig
follow
us
portswigger
