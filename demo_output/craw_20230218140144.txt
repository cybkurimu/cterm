working
with
in
burp
suite
portswigger
login
products
solutions
research
academy
daily
swig
support
company
customers
about
blog
careers
legal
contact
resellers
my
account
customers
about
blog
careers
legal
contact
resellers
burp
suite
enterprise
edition
the
dynamic
web
vulnerability
burp
suite
professional
the
web
penetration
testing
burp
suite
community
edition
the
best
manual
tools
to
start
web
security
from
burp
suite
lightweight
web
application
security
scanning
for
view
all
product
editions
account
and
subscription
management
information
on
and
application
security
testing
see
how
our
software
enables
the
world
to
secure
the
devsecops
catch
critical
ship
more
secure
more
penetration
testing
accelerate
penetration
testing
find
more
more
automated
scanning
scale
dynamic
reduce
save
bug
bounty
hunting
level
up
your
hacking
and
earn
more
bug
compliance
enhance
security
monitoring
to
comply
with
view
all
solutions
product
comparison
the
difference
between
pro
and
enterprise
support
center
get
help
and
advice
from
our
experts
on
all
things
documentation
tutorials
and
guides
for
burp
get
started
professional
get
started
with
burp
suite
get
started
enterprise
get
started
with
burp
suite
enterprise
user
forum
get
your
questions
answered
in
the
user
downloads
download
the
latest
version
of
burp
visit
the
support
center
downloads
download
the
latest
version
of
burp
product
support
and
documentation
support
center
getting
started
edition
enterprise
edition
latest
releases
burp
extensions
installing
extensions
bapp
store
creating
extensions
user
forum
training
search
professional
and
community
edition
professional
and
community
edition
getting
started
step
download
and
install
step
intercepting
http
traffic
step
modifying
requests
step
setting
the
target
scope
step
reissuing
requests
step
running
your
first
scan
step
generating
a
report
step
what
testing
workflow
tools
browser
proxy
overview
getting
started
with
burp
proxy
proxy
intercept
http
history
overview
filtering
http
history
websockets
history
overview
filtering
websockets
history
settings
managing
ca
certificates
invisible
proxying
repeater
overview
getting
started
working
with
http
messages
overview
sending
requests
in
sequence
working
with
websocket
messages
tabs
managing
tabs
managing
tab
groups
settings
overview
settings
intruder
overview
getting
started
configuring
attacks
overview
payload
positions
attack
types
payload
types
overview
payload
lists
payload
processing
resource
pools
attack
settings
managing
tabs
attack
results
overview
editing
attacks
saving
attacks
viewing
results
analyzing
results
testing
workflow
typical
uses
overview
enumerating
identifiers
fuzzing
harvesting
data
enumerating
subdomains
logins
target
overview
site
map
overview
getting
started
workflow
tools
filter
comparing
site
maps
comparison
results
editing
the
layout
scope
overview
setting
the
target
scope
url
matching
issue
definitions
manual
application
mapping
reviewing
unrequested
items
analyzing
the
attack
surface
inspector
overview
getting
started
modifying
requests
settings
message
editor
overview
text
editor
settings
scanner
collaborator
overview
getting
started
settings
logger
overview
getting
started
working
with
logger
entries
settings
task
logger
viewing
requests
sent
by
burp
extensions
sequencer
overview
getting
started
obtaining
a
token
sample
overview
live
capture
settings
results
overview
tests
dom
invader
overview
enabling
dom
invader
testing
for
dom
xss
testing
with
web
messages
testing
for
prototype
pollution
testing
for
dom
clobbering
settings
overview
main
settings
attack
types
web
message
settings
prototype
pollution
settings
misc
settings
canary
settings
clickbandit
comparer
decoder
engagement
tools
overview
target
analyzer
content
discovery
generate
csrf
poc
manual
testing
simulator
infiltrator
search
tutorials
intercepting
http
requests
and
responses
augmenting
manual
testing
using
burp
scanner
resending
individual
requests
with
burp
repeater
scanning
a
website
for
vulnerabilities
using
live
tasks
in
burp
suite
using
burp
suite
projects
touring
the
burp
suite
user
interface
using
burp
interception
rules
using
target
scope
in
burp
suite
testing
websockets
with
burp
suite
reducing
noise
during
manual
testing
brute
forcing
a
login
with
burp
intruder
enumerating
subdomains
with
burp
intruder
viewing
requests
sent
by
burp
extensions
using
logger
testing
for
reflected
xss
using
burp
repeater
spoofing
your
ip
address
using
burp
proxy
match
and
replace
credential
stuffing
using
burp
intruder
burp
extensions
overview
installing
extensions
managing
extensions
monitoring
system
impact
creating
extensions
getting
started
for
the
bapp
store
acceptance
criteria
submitting
an
extension
montoya
api
javadoc
github
examples
extender
api
javadoc
examples
reporting
scan
results
overview
generating
a
report
report
settings
project
files
overview
creating
project
files
managing
project
files
settings
settings
overview
key
settings
tool
settings
proxy
intruder
repeater
sequencer
browser
project
settings
scope
collaborator
tasks
automatic
backup
logging
session
settings
sessions
session
handling
rule
editor
macro
editor
network
settings
connections
tls
http
user
interface
settings
inspector
and
message
editor
hotkeys
display
suite
settings
rest
api
updates
performance
feedback
temporary
files
location
extensions
configuration
library
response
extraction
rules
testing
mobile
applications
overview
configuring
an
ios
device
configuring
an
android
device
troubleshooting
testing
with
overview
basics
in
the
message
editor
performing
exclusive
attacks
training
troubleshooting
support
center
documentation
desktop
editions
professional
community
working
with
in
burp
suite
last
february
read
minutes
many
servers
now
support
this
exposes
them
to
potential
vulnerabilities
that
are
impossible
to
test
for
using
tools
that
only
speak
burp
suite
provides
unrivaled
support
for
allowing
you
to
work
with
requests
in
ways
that
no
other
tools
you
can
work
with
an
representation
of
the
request
in
the
message
editor
burp
normalizes
any
changes
you
make
and
sends
an
equivalent
request
to
the
this
is
perfect
for
general
testing
in
cases
where
the
protocol
using
work
with
an
view
in
the
inspector
this
shows
a
more
accurate
representation
of
the
headers
and
that
will
be
sent
to
the
as
this
view
rely
on
any
it
also
enables
you
to
construct
attacks
using
a
number
of
vectors
unique
features
give
you
the
opportunity
to
explore
a
whole
new
attack
surface
that
has
barely
been
audited
due
to
the
complete
lack
of
any
suitable
tooling
until
for
some
examples
of
check
out
how
one
of
our
researchers
was
able
to
use
these
features
to
identify
and
exploit
a
widespread
new
vector
for
request
portswigger
research
the
sequel
is
always
worse
background
concepts
under
the
is
very
different
from
to
help
you
get
the
most
out
of
these
provided
a
brief
overview
of
the
background
concepts
that
are
default
protocol
by
burp
speaks
to
all
servers
that
advertise
support
for
it
via
alpn
during
the
tls
this
ensures
even
if
not
conducting
any
you
can
still
take
advantage
of
the
performance
improvements
provided
by
where
you
can
also
tailor
this
behavior
to
suit
your
current
needs
by
changing
the
default
protocol
for
the
this
is
useful
if
performing
testing
where
necessary
to
always
use
you
can
still
send
individual
requests
by
switching
the
protocol
in
the
inspector
if
keeping
track
of
which
protocol
using
when
testing
for
important
that
aware
of
which
protocol
is
being
used
for
each
there
are
a
number
of
places
where
this
information
is
in
the
message
the
request
line
and
status
line
contain
the
protocol
this
is
standard
for
but
also
applies
to
the
representation
of
in
burp
the
current
protocol
is
displayed
in
the
corner
of
the
next
to
the
target
in
the
the
request
attributes
section
displays
the
protocol
in
such
as
in
the
proxy
the
highlighted
protocol
is
purely
for
requests
that
intercepted
in
burp
proxy
or
sent
to
burp
you
can
toggle
which
protocol
you
want
to
use
to
send
the
changing
the
protocol
for
a
request
regardless
of
your
default
protocol
settings
you
can
manually
choose
which
protocol
is
used
to
send
each
to
do
use
the
toggle
switch
under
inspector
request
attributes
when
you
change
the
burp
performs
the
necessary
transformations
to
generate
an
equivalent
request
in
the
correct
format
for
the
new
this
means
you
can
easily
upgrade
and
downgrade
individual
requests
as
by
you
can
only
upgrade
requests
to
if
the
server
explicitly
advertises
support
for
this
via
alpn
during
the
tls
if
you
want
to
try
sending
requests
anyway
to
test
for
hidden
you
first
need
to
enable
the
allow
alpn
override
option
from
the
repeater
note
when
working
in
the
possible
to
create
an
request
that
cannot
be
accurately
represented
using
syntax
without
losing
burp
refers
to
this
as
a
kettled
if
you
try
to
downgrade
such
a
burp
warns
you
that
the
request
will
have
to
be
normalized
so
that
it
can
be
displayed
in
the
kettled
requests
the
inspector
enables
you
to
create
requests
that
are
impossible
to
accurately
represent
using
syntax
without
losing
in
honor
of
our
infamous
director
of
james
coined
the
term
to
describe
such
for
technically
possible
to
add
a
newline
character
inside
a
header
value
in
there
is
no
way
to
show
this
in
as
a
newline
indicates
the
end
of
a
so
anything
after
it
would
just
appear
to
be
the
start
of
the
next
once
a
request
is
the
message
editor
no
longer
attempts
to
display
an
equivalent
of
you
will
still
be
able
to
see
the
body
of
the
but
in
place
of
the
burp
will
display
a
notification
that
tells
you
why
the
request
is
considered
if
you
want
to
make
further
changes
to
the
headers
of
a
kettled
you
need
to
use
the
note
burp
and
scanner
currently
support
kettled
if
you
send
a
kettled
request
to
a
tool
that
support
such
as
it
will
be
normalized
so
that
it
can
be
displayed
in
the
what
can
cause
a
request
to
become
requests
become
kettled
whenever
you
make
the
following
changes
using
the
adding
an
uppercase
letter
or
colon
to
a
header
adding
a
newline
character
to
a
header
name
or
modifying
the
value
of
the
adding
a
space
character
to
the
or
adding
a
duplicate
adding
a
semicolon
and
space
character
to
a
cookie
unkettling
a
request
if
you
accidentally
kettle
a
you
have
a
number
of
options
for
unkettling
you
undo
your
changes
using
the
z
use
the
inspector
to
manually
reverse
the
specific
changes
that
have
caused
the
request
to
be
check
the
notification
in
the
editor
to
see
which
changes
you
need
to
downgrade
the
request
to
using
the
toggle
in
the
inspector
and
dismiss
the
warning
telling
you
that
your
changes
will
be
burp
will
normalize
the
effectively
discarding
any
changes
that
are
incompatible
with
kettled
requests
and
extensions
extensions
are
able
to
generate
and
issue
new
kettled
so
you
can
already
develop
your
own
extensions
for
extensions
are
currently
unable
to
modify
kettled
requests
that
were
originally
issued
by
this
is
because
they
only
have
access
to
the
representation
of
settings
there
are
a
number
of
settings
throughout
burp
that
let
you
adjust
its
behavior
when
working
with
changing
the
default
protocol
by
burp
speaks
to
all
servers
that
advertise
support
for
it
via
alpn
during
the
tls
you
can
change
the
default
protocol
so
that
it
uses
unless
you
explicitly
tell
it
to
send
an
to
do
go
to
settings
network
http
and
deselect
the
default
to
if
the
server
supports
it
you
might
want
to
do
this
if
focusing
on
a
vulnerability
that
specifically
requires
such
as
classic
or
request
smuggling
you
can
still
override
this
global
setting
for
individual
requests
by
using
the
protocol
toggle
under
inspector
request
attributes
repeater
options
for
from
the
repeater
menu
at
the
top
of
the
you
can
access
the
following
options
for
controlling
burp
behavior
when
handling
enforce
protocol
choice
on
redirections
by
repeater
will
negotiate
the
protocol
as
normal
when
redirected
if
you
enable
this
it
will
follow
any
redirections
using
the
same
protocol
that
is
selected
under
inspector
request
attributes
this
is
important
when
testing
for
vulnerabilities
that
trigger
enable
connection
reuse
by
repeater
reuses
the
same
connection
for
multiple
some
servers
treat
the
first
request
on
each
connection
differently
to
subsequent
which
can
lead
to
vulnerabilities
appearing
intermittent
or
even
being
missed
on
other
sometimes
a
request
will
corrupt
a
connection
without
causing
the
server
to
tear
it
silently
influencing
how
all
subsequent
requests
get
if
you
run
into
either
of
these
you
can
mitigate
them
by
disabling
this
option
so
that
the
request
you
send
is
always
the
first
one
on
the
strip
connection
header
over
by
when
an
request
contains
a
connection
burp
strips
this
before
sending
the
request
to
the
this
is
because
many
servers
will
reject
requests
containing
this
if
you
want
to
experiment
with
sending
the
connection
header
you
can
disable
this
allow
alpn
override
enabling
this
setting
allows
you
to
send
requests
from
burp
repeater
even
when
the
server
advertise
support
via
this
lets
you
explore
any
attack
surface
reported
by
burp
scanner
or
manually
test
for
hidden
disabling
for
proxy
listeners
in
some
rare
such
as
when
a
client
has
problems
with
its
you
may
want
to
disable
on
the
connection
between
the
client
and
proxy
to
do
click
settings
to
open
the
settings
go
to
tools
proxy
and
select
the
relevant
listener
under
proxy
listeners
then
click
edit
in
the
go
to
the
tab
and
deselect
the
support
burp
will
then
only
accept
on
this
connection
even
if
the
client
wants
to
use
note
that
this
does
not
affect
the
connection
between
burp
and
the
upcoming
enhancements
for
in
burp
there
are
some
limitations
to
we
are
currently
working
on
the
following
increased
support
for
kettled
requests
at
the
some
of
tools
cannot
handle
kettled
most
burp
we
aim
to
enable
you
to
work
with
kettled
requests
in
all
of
tools
in
future
was
this
article
not
really
an
error
please
try
burp
suite
web
vulnerability
scanner
burp
suite
editions
release
notes
vulnerabilities
scripting
sql
injection
request
forgery
xml
external
entity
injection
directory
traversal
request
forgery
customers
organizations
testers
developers
company
about
portswigger
news
careers
contact
legal
privacy
notice
insights
web
security
academy
blog
research
the
daily
swig
follow
us
portswigger
