prototype
pollution
settings
portswigger
login
products
solutions
research
academy
daily
swig
support
company
customers
about
blog
careers
legal
contact
resellers
my
account
customers
about
blog
careers
legal
contact
resellers
burp
suite
enterprise
edition
the
dynamic
web
vulnerability
burp
suite
professional
the
web
penetration
testing
burp
suite
community
edition
the
best
manual
tools
to
start
web
security
from
burp
suite
lightweight
web
application
security
scanning
for
view
all
product
editions
account
and
subscription
management
information
on
and
application
security
testing
see
how
our
software
enables
the
world
to
secure
the
devsecops
catch
critical
ship
more
secure
more
penetration
testing
accelerate
penetration
testing
find
more
more
automated
scanning
scale
dynamic
reduce
save
bug
bounty
hunting
level
up
your
hacking
and
earn
more
bug
compliance
enhance
security
monitoring
to
comply
with
view
all
solutions
product
comparison
the
difference
between
pro
and
enterprise
support
center
get
help
and
advice
from
our
experts
on
all
things
documentation
tutorials
and
guides
for
burp
get
started
professional
get
started
with
burp
suite
get
started
enterprise
get
started
with
burp
suite
enterprise
user
forum
get
your
questions
answered
in
the
user
downloads
download
the
latest
version
of
burp
visit
the
support
center
downloads
download
the
latest
version
of
burp
product
support
and
documentation
support
center
getting
started
edition
enterprise
edition
latest
releases
burp
extensions
installing
extensions
bapp
store
creating
extensions
user
forum
training
search
professional
and
community
edition
professional
and
community
edition
getting
started
step
download
and
install
step
intercepting
http
traffic
step
modifying
requests
step
setting
the
target
scope
step
reissuing
requests
step
running
your
first
scan
step
generating
a
report
step
what
testing
workflow
tools
browser
proxy
overview
getting
started
with
burp
proxy
proxy
intercept
http
history
overview
filtering
http
history
websockets
history
overview
filtering
websockets
history
settings
managing
ca
certificates
invisible
proxying
repeater
overview
getting
started
working
with
http
messages
overview
sending
requests
in
sequence
working
with
websocket
messages
tabs
managing
tabs
managing
tab
groups
settings
overview
settings
intruder
overview
getting
started
configuring
attacks
overview
payload
positions
attack
types
payload
types
overview
payload
lists
payload
processing
resource
pools
attack
settings
managing
tabs
attack
results
overview
editing
attacks
saving
attacks
viewing
results
analyzing
results
testing
workflow
typical
uses
overview
enumerating
identifiers
fuzzing
harvesting
data
enumerating
subdomains
logins
target
overview
site
map
overview
getting
started
workflow
tools
filter
comparing
site
maps
comparison
results
editing
the
layout
scope
overview
setting
the
target
scope
url
matching
issue
definitions
manual
application
mapping
reviewing
unrequested
items
analyzing
the
attack
surface
inspector
overview
getting
started
modifying
requests
settings
message
editor
overview
text
editor
settings
scanner
collaborator
overview
getting
started
settings
logger
overview
getting
started
working
with
logger
entries
settings
task
logger
viewing
requests
sent
by
burp
extensions
sequencer
overview
getting
started
obtaining
a
token
sample
overview
live
capture
settings
results
overview
tests
dom
invader
overview
enabling
dom
invader
testing
for
dom
xss
testing
with
web
messages
testing
for
prototype
pollution
testing
for
dom
clobbering
settings
overview
main
settings
attack
types
web
message
settings
prototype
pollution
settings
misc
settings
canary
settings
clickbandit
comparer
decoder
engagement
tools
overview
target
analyzer
content
discovery
generate
csrf
poc
manual
testing
simulator
infiltrator
search
tutorials
intercepting
http
requests
and
responses
augmenting
manual
testing
using
burp
scanner
resending
individual
requests
with
burp
repeater
scanning
a
website
for
vulnerabilities
using
live
tasks
in
burp
suite
using
burp
suite
projects
touring
the
burp
suite
user
interface
using
burp
interception
rules
using
target
scope
in
burp
suite
testing
websockets
with
burp
suite
reducing
noise
during
manual
testing
brute
forcing
a
login
with
burp
intruder
enumerating
subdomains
with
burp
intruder
viewing
requests
sent
by
burp
extensions
using
logger
testing
for
reflected
xss
using
burp
repeater
spoofing
your
ip
address
using
burp
proxy
match
and
replace
credential
stuffing
using
burp
intruder
burp
extensions
overview
installing
extensions
managing
extensions
monitoring
system
impact
creating
extensions
getting
started
for
the
bapp
store
acceptance
criteria
submitting
an
extension
montoya
api
javadoc
github
examples
extender
api
javadoc
examples
reporting
scan
results
overview
generating
a
report
report
settings
project
files
overview
creating
project
files
managing
project
files
settings
settings
overview
key
settings
tool
settings
proxy
intruder
repeater
sequencer
browser
project
settings
scope
collaborator
tasks
automatic
backup
logging
session
settings
sessions
session
handling
rule
editor
macro
editor
network
settings
connections
tls
http
user
interface
settings
inspector
and
message
editor
hotkeys
display
suite
settings
rest
api
updates
performance
feedback
temporary
files
location
extensions
configuration
library
response
extraction
rules
testing
mobile
applications
overview
configuring
an
ios
device
configuring
an
android
device
troubleshooting
testing
with
overview
basics
in
the
message
editor
performing
exclusive
attacks
training
troubleshooting
support
center
documentation
desktop
editions
tools
dom
invader
settings
prototype
pollution
settings
professional
community
prototype
pollution
settings
last
february
read
minutes
you
can
click
the
cog
icon
next
to
the
prototype
pollution
option
to
access
further
settings
for
how
dom
tests
for
prototype
pollution
scan
for
gadgets
when
this
setting
is
dom
invader
automatically
scans
for
gadgets
whenever
the
page
although
you
can
scan
for
gadgets
using
specific
sources
this
setting
is
a
useful
alternative
in
cases
where
you
found
any
this
enables
you
to
ensure
that
your
site
contain
any
gadgets
that
could
potentially
be
exploited
in
dom
invader
automatically
adjusts
the
rest
of
the
prototype
pollution
you
can
override
these
settings
manually
if
amount
of
properties
per
frame
by
dom
invader
automatically
scales
the
number
of
properties
used
per
frame
when
scanning
for
prototype
pollution
this
helps
to
improve
but
lead
to
gadgets
being
for
an
injected
property
could
cause
an
exception
that
prevents
dom
invader
from
testing
any
other
gadgets
within
the
same
resulting
in
false
if
you
you
can
disable
this
setting
and
use
the
slider
to
set
a
fixed
limit
lowering
the
limit
makes
the
scan
take
but
reduces
the
chance
of
you
missing
increasing
the
limit
has
the
opposite
scan
nested
properties
by
dom
invader
recursively
scans
properties
nested
within
other
if
you
disable
this
dom
invader
only
scans
for
gadgets
using
the
properties
of
each
for
consider
the
following
const
user
by
dom
invader
will
test
all
properties
of
this
user
if
you
disable
this
both
the
and
properties
will
be
query
string
injection
by
dom
invader
tests
for
prototype
pollution
using
parameters
in
the
query
you
may
need
to
disable
this
setting
if
it
is
preventing
the
site
from
working
hash
injection
by
dom
invader
tests
for
prototype
pollution
using
the
hash
or
fragment
part
of
the
you
may
need
to
disable
this
setting
if
it
is
preventing
the
site
from
working
json
injection
by
dom
invader
tests
for
prototype
pollution
by
injecting
web
you
may
need
to
disable
this
setting
if
it
is
preventing
the
site
from
working
verify
onload
by
dom
invader
waits
for
the
page
to
finish
loading
before
reporting
on
prototype
this
is
to
ensure
that
any
identified
gadgets
are
still
present
in
the
final
if
you
disable
this
dom
invader
reports
on
potential
gadgets
as
soon
as
it
finds
this
can
reduce
the
duration
of
the
but
may
result
in
false
for
dom
invader
could
identify
gadgets
using
the
constructor
or
which
might
be
sanitized
by
the
time
the
page
has
finished
remove
csp
header
when
this
setting
is
dom
invader
strips
the
header
from
all
this
prevents
the
csp
from
blocking
potential
xss
as
well
as
which
are
necessary
when
scanning
for
remove
header
when
this
setting
is
dom
invader
strips
the
header
from
all
this
prevents
it
from
blocking
which
are
necessary
when
scanning
for
scan
each
technique
in
separate
frame
for
performance
dom
invader
scans
for
prototype
pollution
in
the
top
frame
by
you
may
encounter
situations
where
the
different
techniques
interfere
with
each
which
could
cause
you
to
miss
for
trying
both
and
constructor
at
the
same
time
fails
on
some
even
though
constructor
in
isolation
when
this
setting
is
dom
invader
uses
a
separate
iframe
for
each
although
this
may
have
a
minor
performance
it
ensures
that
each
technique
is
tested
reducing
the
chance
of
false
disabling
prototype
pollution
techniques
dom
invader
uses
a
number
of
different
techniques
for
prototype
you
may
find
that
using
all
of
these
techniques
at
once
prevents
the
attack
from
working
on
certain
for
this
you
may
prefer
to
disable
some
of
the
techniques
or
use
one
technique
at
a
to
disable
prototype
pollution
from
the
dom
invader
settings
under
attack
types
click
the
cog
icon
next
to
the
prototype
pollution
in
the
click
the
techniques
use
the
switches
to
enable
or
disable
the
techniques
as
click
save
and
then
reload
to
refresh
the
this
is
required
in
order
for
your
changes
to
take
was
this
article
not
really
an
error
please
try
burp
suite
web
vulnerability
scanner
burp
suite
editions
release
notes
vulnerabilities
scripting
sql
injection
request
forgery
xml
external
entity
injection
directory
traversal
request
forgery
customers
organizations
testers
developers
company
about
portswigger
news
careers
contact
legal
privacy
notice
insights
web
security
academy
blog
research
the
daily
swig
follow
us
portswigger
