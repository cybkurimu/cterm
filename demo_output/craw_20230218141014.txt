testing
for
dom
xss
using
web
messages
portswigger
login
products
solutions
research
academy
daily
swig
support
company
customers
about
blog
careers
legal
contact
resellers
my
account
customers
about
blog
careers
legal
contact
resellers
burp
suite
enterprise
edition
the
dynamic
web
vulnerability
burp
suite
professional
the
web
penetration
testing
burp
suite
community
edition
the
best
manual
tools
to
start
web
security
from
burp
suite
lightweight
web
application
security
scanning
for
view
all
product
editions
account
and
subscription
management
information
on
and
application
security
testing
see
how
our
software
enables
the
world
to
secure
the
devsecops
catch
critical
ship
more
secure
more
penetration
testing
accelerate
penetration
testing
find
more
more
automated
scanning
scale
dynamic
reduce
save
bug
bounty
hunting
level
up
your
hacking
and
earn
more
bug
compliance
enhance
security
monitoring
to
comply
with
view
all
solutions
product
comparison
the
difference
between
pro
and
enterprise
support
center
get
help
and
advice
from
our
experts
on
all
things
documentation
tutorials
and
guides
for
burp
get
started
professional
get
started
with
burp
suite
get
started
enterprise
get
started
with
burp
suite
enterprise
user
forum
get
your
questions
answered
in
the
user
downloads
download
the
latest
version
of
burp
visit
the
support
center
downloads
download
the
latest
version
of
burp
product
support
and
documentation
support
center
getting
started
edition
enterprise
edition
latest
releases
burp
extensions
installing
extensions
bapp
store
creating
extensions
user
forum
training
search
professional
and
community
edition
professional
and
community
edition
getting
started
step
download
and
install
step
intercepting
http
traffic
step
modifying
requests
step
setting
the
target
scope
step
reissuing
requests
step
running
your
first
scan
step
generating
a
report
step
what
testing
workflow
tools
browser
proxy
overview
getting
started
with
burp
proxy
proxy
intercept
http
history
overview
filtering
http
history
websockets
history
overview
filtering
websockets
history
settings
managing
ca
certificates
invisible
proxying
repeater
overview
getting
started
working
with
http
messages
overview
sending
requests
in
sequence
working
with
websocket
messages
tabs
managing
tabs
managing
tab
groups
settings
overview
settings
intruder
overview
getting
started
configuring
attacks
overview
payload
positions
attack
types
payload
types
overview
payload
lists
payload
processing
resource
pools
attack
settings
managing
tabs
attack
results
overview
editing
attacks
saving
attacks
viewing
results
analyzing
results
testing
workflow
typical
uses
overview
enumerating
identifiers
fuzzing
harvesting
data
enumerating
subdomains
logins
target
overview
site
map
overview
getting
started
workflow
tools
filter
comparing
site
maps
comparison
results
editing
the
layout
scope
overview
setting
the
target
scope
url
matching
issue
definitions
manual
application
mapping
reviewing
unrequested
items
analyzing
the
attack
surface
inspector
overview
getting
started
modifying
requests
settings
message
editor
overview
text
editor
settings
scanner
collaborator
overview
getting
started
settings
logger
overview
getting
started
working
with
logger
entries
settings
task
logger
viewing
requests
sent
by
burp
extensions
sequencer
overview
getting
started
obtaining
a
token
sample
overview
live
capture
settings
results
overview
tests
dom
invader
overview
enabling
dom
invader
testing
for
dom
xss
testing
with
web
messages
testing
for
prototype
pollution
testing
for
dom
clobbering
settings
overview
main
settings
attack
types
web
message
settings
prototype
pollution
settings
misc
settings
canary
settings
clickbandit
comparer
decoder
engagement
tools
overview
target
analyzer
content
discovery
generate
csrf
poc
manual
testing
simulator
infiltrator
search
tutorials
intercepting
http
requests
and
responses
augmenting
manual
testing
using
burp
scanner
resending
individual
requests
with
burp
repeater
scanning
a
website
for
vulnerabilities
using
live
tasks
in
burp
suite
using
burp
suite
projects
touring
the
burp
suite
user
interface
using
burp
interception
rules
using
target
scope
in
burp
suite
testing
websockets
with
burp
suite
reducing
noise
during
manual
testing
brute
forcing
a
login
with
burp
intruder
enumerating
subdomains
with
burp
intruder
viewing
requests
sent
by
burp
extensions
using
logger
testing
for
reflected
xss
using
burp
repeater
spoofing
your
ip
address
using
burp
proxy
match
and
replace
credential
stuffing
using
burp
intruder
burp
extensions
overview
installing
extensions
managing
extensions
monitoring
system
impact
creating
extensions
getting
started
for
the
bapp
store
acceptance
criteria
submitting
an
extension
montoya
api
javadoc
github
examples
extender
api
javadoc
examples
reporting
scan
results
overview
generating
a
report
report
settings
project
files
overview
creating
project
files
managing
project
files
settings
settings
overview
key
settings
tool
settings
proxy
intruder
repeater
sequencer
browser
project
settings
scope
collaborator
tasks
automatic
backup
logging
session
settings
sessions
session
handling
rule
editor
macro
editor
network
settings
connections
tls
http
user
interface
settings
inspector
and
message
editor
hotkeys
display
suite
settings
rest
api
updates
performance
feedback
temporary
files
location
extensions
configuration
library
response
extraction
rules
testing
mobile
applications
overview
configuring
an
ios
device
configuring
an
android
device
troubleshooting
testing
with
overview
basics
in
the
message
editor
performing
exclusive
attacks
training
troubleshooting
support
center
documentation
desktop
editions
tools
dom
invader
testing
for
dom
xss
using
web
messages
professional
community
testing
for
dom
xss
using
web
messages
last
february
read
minutes
dom
invader
provides
a
number
of
features
that
let
you
test
for
dom
xss
using
web
these
logging
any
web
messages
that
are
sent
via
the
method
on
the
along
with
useful
details
about
this
is
similar
to
how
burp
proxy
shows
the
history
of
your
http
requests
and
enabling
you
to
modify
and
resend
web
messages
to
manually
probe
for
dom
xss
this
is
similar
to
how
burp
repeater
reissues
modified
http
automatically
modifying
and
sending
web
messages
to
probe
for
dom
xss
on
your
you
can
access
all
of
these
features
from
dom
messages
note
that
you
first
need
to
enable
postmessage
interception
from
the
dom
invader
settings
menu
in
order
to
use
these
for
more
see
main
settings
web
security
academy
if
you
need
to
brush
up
on
web
dom
check
out
the
web
security
where
you
can
also
find
some
deliberately
vulnerable
labs
to
practice
controlling
the
web
message
source
enabling
web
message
interception
to
avoid
interfering
with
your
target
dom
web
message
features
are
disabled
by
to
enable
these
go
to
the
dom
invader
settings
select
the
postmessage
interception
click
reload
to
reload
the
this
is
necessary
for
your
changes
to
take
identifying
interesting
web
messages
once
you
enable
web
message
dom
invader
automatically
logs
any
web
messages
that
are
sent
on
the
page
via
the
by
it
also
generates
and
sends
its
own
messages
to
any
message
event
handlers
that
it
you
can
see
these
in
the
messages
automated
web
message
analysis
by
dom
invader
tries
to
identify
and
flag
interesting
messages
on
your
it
does
this
by
modifying
the
messages
in
the
following
injecting
your
canary
via
the
data
dom
invader
can
use
this
to
identify
any
sinks
that
this
data
flows
just
like
it
does
with
other
sources
in
the
dom
replacing
the
origin
of
the
message
with
a
fake
origin
that
starts
and
ends
with
the
expected
domain
this
enables
dom
invader
to
automatically
identify
event
handlers
that
rely
on
flawed
logic
or
regular
expressions
to
validate
the
origin
of
incoming
note
you
can
disable
both
of
these
features
from
the
dom
settings
for
more
see
web
message
settings
based
on
the
observed
dom
invader
automatically
flags
messages
that
it
thinks
are
exploitable
by
displaying
an
estimated
issue
severity
and
confidence
all
messages
sent
on
the
page
are
listed
with
at
least
an
information
severity
as
they
may
contain
vulnerabilities
that
dom
invader
detect
message
details
you
can
click
each
message
to
view
more
detailed
information
about
including
whether
the
origin
data
or
source
properties
of
the
message
are
accessed
by
the
this
information
can
provide
clues
that
help
you
to
determine
whether
the
message
is
and
how
you
might
craft
a
suitable
origin
accessed
if
the
code
never
accesses
the
origin
property
of
the
it
is
likely
that
the
origin
is
not
being
as
a
you
may
be
able
to
send
messages
to
the
event
handler
from
an
arbitrary
external
even
messages
in
which
the
code
does
access
the
origin
property
may
still
be
you
may
still
be
able
to
bypass
the
to
help
you
find
ways
to
do
dom
invader
provides
a
link
to
relevant
line
in
the
code
via
a
stack
for
more
see
studying
the
code
web
security
academy
bypassing
flawed
origin
validation
data
accessed
the
data
property
of
the
message
is
where
you
inject
potential
if
the
javascript
never
accesses
this
it
cannot
be
passed
to
a
in
this
the
message
is
of
no
source
accessed
the
source
property
of
the
message
is
a
reference
to
the
window
object
from
which
it
was
in
this
is
usually
a
reference
to
an
websites
often
validate
the
source
property
instead
of
the
origin
as
this
is
a
more
robust
way
of
ensuring
that
the
message
came
from
a
trusted
as
with
the
keep
in
mind
that
code
accessing
this
property
does
not
guarantee
that
the
source
is
being
or
that
this
validation
cannot
be
replaying
web
messages
dom
invader
enables
you
to
modify
and
replay
web
much
like
you
can
with
http
requests
in
burp
this
makes
it
much
simpler
to
probe
for
dom
xss
using
web
messages
as
the
to
send
a
modified
web
from
the
messages
click
on
any
message
to
open
the
message
details
edit
the
data
field
as
click
send
for
you
might
identify
a
message
where
the
event
handler
does
not
validate
the
origin
and
passes
the
data
into
the
in
this
you
could
send
messages
to
test
whether
characters
like
and
are
then
use
these
characters
to
create
and
send
a
generating
a
proof
of
concept
once
you
successfully
identify
an
exploitable
vulnerability
using
a
web
dom
invader
can
generate
an
html
proof
of
concept
that
you
can
include
in
your
to
generate
a
proof
of
select
the
vulnerable
message
to
open
the
message
details
modify
the
values
as
required
for
your
click
build
poc
the
html
is
saved
to
your
read
more
dom
invader
is
highly
for
more
information
about
dom
advanced
features
and
how
you
can
its
behavior
for
a
particular
see
web
message
settings
was
this
article
not
really
an
error
please
try
burp
suite
web
vulnerability
scanner
burp
suite
editions
release
notes
vulnerabilities
scripting
sql
injection
request
forgery
xml
external
entity
injection
directory
traversal
request
forgery
customers
organizations
testers
developers
company
about
portswigger
news
careers
contact
legal
privacy
notice
insights
web
security
academy
blog
research
the
daily
swig
follow
us
portswigger
